#+startup: beamer indent
#+TITLE: Ликбез по разработке
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+DATE: \today
#+AUTHOR: Кирилл Краснощёков, МГТНИИП
#+EMAIL: Krasnoshekov_KI@Krasnoshekov-KI
#+LANGUAGE: ru
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

* # Настройки экспорта                                             :noexport:
** общие
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
** latex (beamer)
#+OPTIONS: H:2
#+LATEX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+BEAMER_THEME: Warsaw
#+BEAMER_COLOR_THEME: seahorse
#+BEAMER_FONT_THEME:
#+BEAMER_INNER_THEME:
#+BEAMER_OUTER_THEME:
#+BEAMER_HEADER:
#+LATEX_HEADER_EXTRA: \usepackage[russian]{babel}
#+LATEX_HEADER_EXTRA: \usepackage[utf8]{inputenc}
#+latex_header: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}

* # Общее                                                          :noexport:
** Проблема
- мы не умеем действовать как целое
- мы уязвимы к выпадению отдельных участников
- мы не вовлечены, наше желание "сделать мир лучше" натыкается на препятствия

** Цель
усилить полезное общение между сотрудниками: 

- улучшить понимание
- сделать работу прозрачной
- вести учёт сделанного (привычка к письменному тексту, рисованию схем, ведению карточек задач)

** Способ достижения
- взять лучшие практики и инструменты
- научиться ими пользоваться

Сейчас понятно, что в число практик точно войдут:
- контроль версий (git)
- виртуальные окружения (virtualenv)
- учёт задач и проектов (trello)
- автоматизированное тестирование (юнит-тесты, функциональные тесты, интерфейс)
- внутренние семинары и лекции

** Что за кадром
- формальные методологии
- системный подход
- ТРИЗ
- экстремальное программирование
- devops
- регламенты, чеклисты
 
** Методика                                                     :noexport:
- все утверждения нужно поддерживать живой демонстрацией
- в то же время материал должен быть самодостаточным

* Управление версиями
** О чём речь?
Есть папка с файлами.

Вы поменяли файлы -- вот новая версия.

** Проблемы
Если что-то испортил:
- сложно понять, когда и в каком файле
- сложно вернуть как было

Можно делать резервные копии вручную:
- много ручной работы
- сложно избежать бардака (нужна самодисциплина)
- файлы будут дублироваться и займут много места

** Решение
Система управления версиями (version control system, VCS):
- делает за вас резервные копии файлов -- меньше ручной работы
- хранит не целые файлы, а только изменения -- нет дублирования
- ведёт историю изменений -- легко найти, где поломалось

Можно записывать изменения настолько подробно, насколько хочется (см. atomic commits).

Но нужно осваивать.

** Совместная работа
Нескольким людям надо менять файлы в одном проекте.

Если файлы не зависят друг от друга, проблем нет.

Но когда проект разрастается, одному сложно с ним управиться. Обычно он разбивается на файлы, и 

Проблема:
- если вместе править файлы в одной папке (сетевой) -- легко запутаться
- если каждый правит у себя, и потом сливают разные версии -- это сложно, трудоёмко, легко ошибиться

Решение:
- сделать центральную ("ничью") версию папки: в ней актуальная версия
- каждый правит у себя 
- каждый сам отвечает за актуальность своей версии
- инструмент упрощает слив разных версий

** Термины
- Репозиторий: папка с файлами + история изменений.
- Центральный репозиторий: папка, с которой синхронизируются все, кто работает над проектом.
- Коммит: 
  1) слепок папки на какой-то момент времени
  2) акт создания слепка.
- Ветка: цепочка последовательных коммитов
- Слияние веток (мердж): 

Образ: направленный ациклический граф.

Картинка: граф проекта.

** git
- распределённая
- основанная на слепках файлов, не на различиях

Как установить:
1. скачать [[https://git-scm.com/download/win][последнюю версию]]
2. установить (без админских прав)

Как работать:
- в консоли: git bash / git cmd
- в приложении

** Как работать локально
1. создать репозиторий: ~$ git init~
2. поработать с проектом: изменятся файлы
3. добавить изменённые файлы: ~$ git add <path_to_file>~
4. закоммитить изменения: ~$ git commit~
   !!! обязательно написать пояснение к коммиту !!!

** Как работать совместно:
1. создать репозиторий на сервере: в интерфейсе на gitlab.com
2. клонировать его: ~git clone <url>~
3. поработать с проектом: изменятся файлы
4. добавить изменённые файлы: ~$ git add <path_to_file>~
5. закоммитить изменения: ~$ git commit~
6. отправить на сервер: ~$ git push origin master~ 

** Как *правильно* работать совместно:
1. создать ветку под отдельную функцию
2. поработать с проектом
3. добавить изменённые файлы и закоммитить
4. повторить 2-3, пока функция не создана
5. смерджить ветку с мастером
6. отправить на сервер

Полезно:
- утром перед началом работы мерджить в свою ветку накопившиеся изменения из мастера (ваши коллеги тоже работают!)

** Фишки git
*** какие файлы учитывать
~.git/info/exclude~:
#+BEGIN_SRC
__cache__/
__pycache__/
.ipynb_checkpoints/
*.pyc
#+END_SRC

** Инструменты
- консоль!
- графическая морда
** Морды
- git GUI
- [[https://www.youtube.com/watch?v=hkBVAi3oKvo][ungit]]

* Учёт задач
** Мотивация
Проблема:
- не знаю, чем занимаюсь
- никто не знает, чем я занимаюсь

Решение:
- сначала нужно согласиться, для чего мы тут собрались
- только потом применять инструменты

Инструменты:
- записывать! цель, ограничения, ход работ. Где записывать: в трелло, в гитлабе

** gitlab
Коротко: репозиторий + трекер задач

* Тестирование и документация
** Мотивация
** Виды тестов
** Юнит-тесты (модульные тесты)
*** docstring
*** pytest

* Структурирование программ
** Зачем
- снизить сложность = число зависимостей между сущностями
- позволить нескольким людям работать над частями независимо
** Метафора программы
Зачем нужна метафора программы:
- для полезных аналогий (см. метод фокальных объекотв)
- 

Какие бывают:
- книга или статья
- жемчужина ("аккреционная модель")
- здание


* Инструменты
** jupyter notebook
Плюсы:
- простота и интерактивность

Ограничения:
- метафора блокнота -- повествование (статья, отчёт, презентация), а метафора программы -- здание

** модули в Python
** atom & hydrogen
Плюсы: интерактивность, 

** vim, emacs, spacemacs
