* _ Системы управления версиями
** Зачем?
*** Хранить историю
*** Работать совместно
** Что это даёт
*** История изменений
*** Меньше ручной работы
** git
*** Как установить
1. скачать [[https://git-scm.com/download/win][последнюю версию]]
2. установить (без админских прав)

*** Консоль
*** Клиент
*** Другие клиенты
- git GUI -- входит в дистрибутив git, функциональный, не очень дружественный
- [[https://git-cola.github.io][git-cola]] -- минималистичный, ставится без админских прав
- [[https://www.youtube.com/watch?v=hkBVAi3oKvo][ungit]] -- минималистичный, хрен поставишь, но очень интуитивный :)

Есть и [[https://www.slant.co/topics/2089/~git-clients-for-windows][другие]].

* _ Работа с git
** Работа в одиночку
*** Репозиторий
*** Коммит
*** Схема работы
1. создать репозиторий: ~$ git init~
2. поработать с проектом: изменятся файлы
3. добавить изменённые файлы: ~$ git add <path_to_file>~
4. закоммитить изменения: ~$ git commit~
   !!! обязательно написать пояснение к коммиту !!!
 
** Совместная работа
*** Центральный репозиторий
*** Схема работы
1. создать репозиторий на сервере: в интерфейсе на gitlab.com
2. клонировать его: ~git clone <url>~
3. поработать с проектом: изменятся файлы
4. добавить изменённые файлы: ~$ git add <path_to_file>~
5. закоммитить изменения: ~$ git commit~
6. отправить на сервер: ~$ git push origin master~ 

** Совместная работа 2
*** Ветка
*** Слияние веток
*** Схема работы
1. создать ветку под отдельную функцию
2. поработать с проектом
3. добавить изменённые файлы и закоммитить
4. повторить 2-3, пока функция не создана
5. смерджить ветку с мастером
6. отправить на сервер

Полезно:
- утром перед началом работы мерджить в свою ветку накопившиеся изменения из мастера (ваши коллеги тоже работают!)

** Полезные детали
*** Как исключить файлы
~.git/info/exclude~:
#+BEGIN_SRC
__cache__/
__pycache__/
.ipynb_checkpoints/
*.pyc
#+END_SRC



